import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Page } from './providers/page';
import { ClrDatagridPageSize } from './datagrid-page-size';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDatagridPagination implements OnDestroy, OnInit {
    page: Page;
    commonStrings: ClrCommonStringsService;
    detailService: DetailService;
    _pageSizeComponent: ClrDatagridPageSize;
    currentPageInputRef: ElementRef;
    constructor(page: Page, commonStrings: ClrCommonStringsService, detailService: DetailService);
    /**********
     * Subscription to the Page service for page changes.
     * Note: this only emits after the datagrid is initialized/stabalized and the page changes.
     */
    ngOnInit(): void;
    /**
     * Subscription to the page service changes
     */
    private _pageSubscription;
    ngOnDestroy(): void;
    /**
     * Page size
     */
    get pageSize(): number;
    disableCurrentPageInput: boolean;
    set pageSize(size: number);
    /**
     * Total items (needed to guess the last page)
     */
    get totalItems(): number;
    set totalItems(total: number);
    /**
     * Last page
     */
    get lastPage(): number;
    set lastPage(last: number);
    /**
     * Current page
     */
    get currentPage(): number;
    set currentPage(page: number);
    currentChanged: EventEmitter<number>;
    /**
     * Moves to the previous page if it exists
     */
    previous(): void;
    /**
     * Moves to the next page if it exists
     */
    next(): void;
    /**
     * Index of the first item displayed on the current page, starting at 0, -1 if none displayed
     */
    get firstItem(): number;
    /**
     * Index of the last item displayed on the current page, starting at 0, -1 if none displayed
     */
    get lastItem(): number;
    /**
     * Conditionally adds page numbers before and after the current page
     */
    get middlePages(): number[];
    /**
     * We only update the pagination's current page on blur of the input field, or
     * when they press enter.
     */
    updateCurrentPage(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDatagridPagination, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDatagridPagination, "clr-dg-pagination", never, { "pageSize": "clrDgPageSize"; "totalItems": "clrDgTotalItems"; "lastPage": "clrDgLastPage"; "currentPage": "clrDgPage"; "disableCurrentPageInput": "clrDgPageInputDisabled"; }, { "currentChanged": "clrDgPageChange"; }, ["_pageSizeComponent"], ["clr-dg-page-size", "*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcGFnaW5hdGlvbi5kLnRzIiwic291cmNlcyI6WyJkYXRhZ3JpZC1wYWdpbmF0aW9uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi9wcm92aWRlcnMvcGFnZSc7XG5pbXBvcnQgeyBDbHJEYXRhZ3JpZFBhZ2VTaXplIH0gZnJvbSAnLi9kYXRhZ3JpZC1wYWdlLXNpemUnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGV0YWlsU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RldGFpbC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsckRhdGFncmlkUGFnaW5hdGlvbiBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgICBwYWdlOiBQYWdlO1xuICAgIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlO1xuICAgIGRldGFpbFNlcnZpY2U6IERldGFpbFNlcnZpY2U7XG4gICAgX3BhZ2VTaXplQ29tcG9uZW50OiBDbHJEYXRhZ3JpZFBhZ2VTaXplO1xuICAgIGN1cnJlbnRQYWdlSW5wdXRSZWY6IEVsZW1lbnRSZWY7XG4gICAgY29uc3RydWN0b3IocGFnZTogUGFnZSwgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UsIGRldGFpbFNlcnZpY2U6IERldGFpbFNlcnZpY2UpO1xuICAgIC8qKioqKioqKioqXG4gICAgICogU3Vic2NyaXB0aW9uIHRvIHRoZSBQYWdlIHNlcnZpY2UgZm9yIHBhZ2UgY2hhbmdlcy5cbiAgICAgKiBOb3RlOiB0aGlzIG9ubHkgZW1pdHMgYWZ0ZXIgdGhlIGRhdGFncmlkIGlzIGluaXRpYWxpemVkL3N0YWJhbGl6ZWQgYW5kIHRoZSBwYWdlIGNoYW5nZXMuXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpcHRpb24gdG8gdGhlIHBhZ2Ugc2VydmljZSBjaGFuZ2VzXG4gICAgICovXG4gICAgcHJpdmF0ZSBfcGFnZVN1YnNjcmlwdGlvbjtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFBhZ2Ugc2l6ZVxuICAgICAqL1xuICAgIGdldCBwYWdlU2l6ZSgpOiBudW1iZXI7XG4gICAgZGlzYWJsZUN1cnJlbnRQYWdlSW5wdXQ6IGJvb2xlYW47XG4gICAgc2V0IHBhZ2VTaXplKHNpemU6IG51bWJlcik7XG4gICAgLyoqXG4gICAgICogVG90YWwgaXRlbXMgKG5lZWRlZCB0byBndWVzcyB0aGUgbGFzdCBwYWdlKVxuICAgICAqL1xuICAgIGdldCB0b3RhbEl0ZW1zKCk6IG51bWJlcjtcbiAgICBzZXQgdG90YWxJdGVtcyh0b3RhbDogbnVtYmVyKTtcbiAgICAvKipcbiAgICAgKiBMYXN0IHBhZ2VcbiAgICAgKi9cbiAgICBnZXQgbGFzdFBhZ2UoKTogbnVtYmVyO1xuICAgIHNldCBsYXN0UGFnZShsYXN0OiBudW1iZXIpO1xuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgcGFnZVxuICAgICAqL1xuICAgIGdldCBjdXJyZW50UGFnZSgpOiBudW1iZXI7XG4gICAgc2V0IGN1cnJlbnRQYWdlKHBhZ2U6IG51bWJlcik7XG4gICAgY3VycmVudENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIC8qKlxuICAgICAqIE1vdmVzIHRvIHRoZSBwcmV2aW91cyBwYWdlIGlmIGl0IGV4aXN0c1xuICAgICAqL1xuICAgIHByZXZpb3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTW92ZXMgdG8gdGhlIG5leHQgcGFnZSBpZiBpdCBleGlzdHNcbiAgICAgKi9cbiAgICBuZXh0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW5kZXggb2YgdGhlIGZpcnN0IGl0ZW0gZGlzcGxheWVkIG9uIHRoZSBjdXJyZW50IHBhZ2UsIHN0YXJ0aW5nIGF0IDAsIC0xIGlmIG5vbmUgZGlzcGxheWVkXG4gICAgICovXG4gICAgZ2V0IGZpcnN0SXRlbSgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogSW5kZXggb2YgdGhlIGxhc3QgaXRlbSBkaXNwbGF5ZWQgb24gdGhlIGN1cnJlbnQgcGFnZSwgc3RhcnRpbmcgYXQgMCwgLTEgaWYgbm9uZSBkaXNwbGF5ZWRcbiAgICAgKi9cbiAgICBnZXQgbGFzdEl0ZW0oKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENvbmRpdGlvbmFsbHkgYWRkcyBwYWdlIG51bWJlcnMgYmVmb3JlIGFuZCBhZnRlciB0aGUgY3VycmVudCBwYWdlXG4gICAgICovXG4gICAgZ2V0IG1pZGRsZVBhZ2VzKCk6IG51bWJlcltdO1xuICAgIC8qKlxuICAgICAqIFdlIG9ubHkgdXBkYXRlIHRoZSBwYWdpbmF0aW9uJ3MgY3VycmVudCBwYWdlIG9uIGJsdXIgb2YgdGhlIGlucHV0IGZpZWxkLCBvclxuICAgICAqIHdoZW4gdGhleSBwcmVzcyBlbnRlci5cbiAgICAgKi9cbiAgICB1cGRhdGVDdXJyZW50UGFnZShldmVudDogYW55KTogdm9pZDtcbn1cbiJdfQ==