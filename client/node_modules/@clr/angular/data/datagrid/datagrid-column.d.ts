import { EventEmitter, OnDestroy, OnInit, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ClrDatagridSortOrder } from './enums/sort-order.enum';
import { ClrDatagridComparatorInterface } from './interfaces/comparator.interface';
import { FiltersProvider } from './providers/filters';
import { Sort } from './providers/sort';
import { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';
import { ClrDatagridFilterInterface } from './interfaces/filter.interface';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDatagridColumn<T = any> extends DatagridFilterRegistrar<T, ClrDatagridFilterInterface<T>> implements OnDestroy, OnInit {
    private _sort;
    private vcr;
    private detailService;
    private changeDetectorRef;
    commonStrings: ClrCommonStringsService;
    constructor(_sort: Sort<T>, filters: FiltersProvider<T>, vcr: ViewContainerRef, detailService: DetailService, changeDetectorRef: ChangeDetectorRef, commonStrings: ClrCommonStringsService);
    showSeparator: boolean;
    /**
     * Subscription to the sort service changes
     */
    private subscriptions;
    ngOnDestroy(): void;
    private listenForDetailPaneChanges;
    private listenForSortingChanges;
    private _field;
    get field(): string;
    private _colType;
    get colType(): 'string' | 'number';
    set colType(value: 'string' | 'number');
    set field(field: string);
    private setupDefaultFilter;
    /**
     * ClrDatagridComparatorInterface to use when sorting the column
     */
    private _sortBy;
    get sortBy(): ClrDatagridComparatorInterface<T> | string;
    set sortBy(comparator: ClrDatagridComparatorInterface<T> | string);
    /**
     * Indicates if the column is sortable
     */
    get sortable(): boolean;
    /**
     * Indicates if the column is currently sorted
     *
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    private _sorted;
    get sorted(): boolean;
    /**
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    set sorted(value: boolean);
    /**
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    sortedChange: EventEmitter<boolean>;
    /**
     * Indicates how the column is currently sorted
     */
    private _sortOrder;
    get sortOrder(): ClrDatagridSortOrder;
    set sortOrder(value: ClrDatagridSortOrder);
    get ariaSort(): "none" | "ascending" | "descending";
    sortOrderChange: EventEmitter<ClrDatagridSortOrder>;
    sortIcon: string;
    /**
     * Sorts the datagrid based on this column
     */
    sort(reverse?: boolean): void;
    /**
     * A custom filter for this column that can be provided in the projected content
     */
    customFilter: boolean;
    set projectedFilter(custom: any);
    private initFilterValue;
    get filterValue(): string | [number, number];
    set updateFilterValue(newValue: string | [number, number]);
    set filterValue(newValue: string | [number, number]);
    filterValueChange: EventEmitter<any>;
    private wrappedInjector;
    ngOnInit(): void;
    get _view(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDatagridColumn<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDatagridColumn<any>, "clr-dg-column", never, { "field": "clrDgField"; "colType": "clrDgColType"; "updateFilterValue": "clrFilterValue"; "sortBy": "clrDgSortBy"; "sorted": "clrDgSorted"; "sortOrder": "clrDgSortOrder"; }, { "sortedChange": "clrDgSortedChange"; "sortOrderChange": "clrDgSortOrderChange"; "filterValueChange": "clrFilterValueChange"; }, ["projectedFilter"], ["clr-dg-filter, clr-dg-string-filter, clr-dg-numeric-filter", "*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY29sdW1uLmQudHMiLCJzb3VyY2VzIjpbImRhdGFncmlkLWNvbHVtbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q29udGFpbmVyUmVmLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xyRGF0YWdyaWRTb3J0T3JkZXIgfSBmcm9tICcuL2VudW1zL3NvcnQtb3JkZXIuZW51bSc7XG5pbXBvcnQgeyBDbHJEYXRhZ3JpZENvbXBhcmF0b3JJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZXMvY29tcGFyYXRvci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRmlsdGVyc1Byb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvZmlsdGVycyc7XG5pbXBvcnQgeyBTb3J0IH0gZnJvbSAnLi9wcm92aWRlcnMvc29ydCc7XG5pbXBvcnQgeyBEYXRhZ3JpZEZpbHRlclJlZ2lzdHJhciB9IGZyb20gJy4vdXRpbHMvZGF0YWdyaWQtZmlsdGVyLXJlZ2lzdHJhcic7XG5pbXBvcnQgeyBDbHJEYXRhZ3JpZEZpbHRlckludGVyZmFjZSB9IGZyb20gJy4vaW50ZXJmYWNlcy9maWx0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IERldGFpbFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kZXRhaWwuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJEYXRhZ3JpZENvbHVtbjxUID0gYW55PiBleHRlbmRzIERhdGFncmlkRmlsdGVyUmVnaXN0cmFyPFQsIENsckRhdGFncmlkRmlsdGVySW50ZXJmYWNlPFQ+PiBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgICBwcml2YXRlIF9zb3J0O1xuICAgIHByaXZhdGUgdmNyO1xuICAgIHByaXZhdGUgZGV0YWlsU2VydmljZTtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xuICAgIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlO1xuICAgIGNvbnN0cnVjdG9yKF9zb3J0OiBTb3J0PFQ+LCBmaWx0ZXJzOiBGaWx0ZXJzUHJvdmlkZXI8VD4sIHZjcjogVmlld0NvbnRhaW5lclJlZiwgZGV0YWlsU2VydmljZTogRGV0YWlsU2VydmljZSwgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSk7XG4gICAgc2hvd1NlcGFyYXRvcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpcHRpb24gdG8gdGhlIHNvcnQgc2VydmljZSBjaGFuZ2VzXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JEZXRhaWxQYW5lQ2hhbmdlcztcbiAgICBwcml2YXRlIGxpc3RlbkZvclNvcnRpbmdDaGFuZ2VzO1xuICAgIHByaXZhdGUgX2ZpZWxkO1xuICAgIGdldCBmaWVsZCgpOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfY29sVHlwZTtcbiAgICBnZXQgY29sVHlwZSgpOiAnc3RyaW5nJyB8ICdudW1iZXInO1xuICAgIHNldCBjb2xUeXBlKHZhbHVlOiAnc3RyaW5nJyB8ICdudW1iZXInKTtcbiAgICBzZXQgZmllbGQoZmllbGQ6IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBzZXR1cERlZmF1bHRGaWx0ZXI7XG4gICAgLyoqXG4gICAgICogQ2xyRGF0YWdyaWRDb21wYXJhdG9ySW50ZXJmYWNlIHRvIHVzZSB3aGVuIHNvcnRpbmcgdGhlIGNvbHVtblxuICAgICAqL1xuICAgIHByaXZhdGUgX3NvcnRCeTtcbiAgICBnZXQgc29ydEJ5KCk6IENsckRhdGFncmlkQ29tcGFyYXRvckludGVyZmFjZTxUPiB8IHN0cmluZztcbiAgICBzZXQgc29ydEJ5KGNvbXBhcmF0b3I6IENsckRhdGFncmlkQ29tcGFyYXRvckludGVyZmFjZTxUPiB8IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBjb2x1bW4gaXMgc29ydGFibGVcbiAgICAgKi9cbiAgICBnZXQgc29ydGFibGUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNvbHVtbiBpcyBjdXJyZW50bHkgc29ydGVkXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIHdpbGwgYmUgcmVtb3ZlZCBzb29uLCBpbiBmYXZvciBvZiB0aGUgc29ydE9yZGVyIG1lY2hhbmlzbVxuICAgICAqL1xuICAgIHByaXZhdGUgX3NvcnRlZDtcbiAgICBnZXQgc29ydGVkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyB3aWxsIGJlIHJlbW92ZWQgc29vbiwgaW4gZmF2b3Igb2YgdGhlIHNvcnRPcmRlciBtZWNoYW5pc21cbiAgICAgKi9cbiAgICBzZXQgc29ydGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIHdpbGwgYmUgcmVtb3ZlZCBzb29uLCBpbiBmYXZvciBvZiB0aGUgc29ydE9yZGVyIG1lY2hhbmlzbVxuICAgICAqL1xuICAgIHNvcnRlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBob3cgdGhlIGNvbHVtbiBpcyBjdXJyZW50bHkgc29ydGVkXG4gICAgICovXG4gICAgcHJpdmF0ZSBfc29ydE9yZGVyO1xuICAgIGdldCBzb3J0T3JkZXIoKTogQ2xyRGF0YWdyaWRTb3J0T3JkZXI7XG4gICAgc2V0IHNvcnRPcmRlcih2YWx1ZTogQ2xyRGF0YWdyaWRTb3J0T3JkZXIpO1xuICAgIGdldCBhcmlhU29ydCgpOiBcIm5vbmVcIiB8IFwiYXNjZW5kaW5nXCIgfCBcImRlc2NlbmRpbmdcIjtcbiAgICBzb3J0T3JkZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDbHJEYXRhZ3JpZFNvcnRPcmRlcj47XG4gICAgc29ydEljb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTb3J0cyB0aGUgZGF0YWdyaWQgYmFzZWQgb24gdGhpcyBjb2x1bW5cbiAgICAgKi9cbiAgICBzb3J0KHJldmVyc2U/OiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBIGN1c3RvbSBmaWx0ZXIgZm9yIHRoaXMgY29sdW1uIHRoYXQgY2FuIGJlIHByb3ZpZGVkIGluIHRoZSBwcm9qZWN0ZWQgY29udGVudFxuICAgICAqL1xuICAgIGN1c3RvbUZpbHRlcjogYm9vbGVhbjtcbiAgICBzZXQgcHJvamVjdGVkRmlsdGVyKGN1c3RvbTogYW55KTtcbiAgICBwcml2YXRlIGluaXRGaWx0ZXJWYWx1ZTtcbiAgICBnZXQgZmlsdGVyVmFsdWUoKTogc3RyaW5nIHwgW251bWJlciwgbnVtYmVyXTtcbiAgICBzZXQgdXBkYXRlRmlsdGVyVmFsdWUobmV3VmFsdWU6IHN0cmluZyB8IFtudW1iZXIsIG51bWJlcl0pO1xuICAgIHNldCBmaWx0ZXJWYWx1ZShuZXdWYWx1ZTogc3RyaW5nIHwgW251bWJlciwgbnVtYmVyXSk7XG4gICAgZmlsdGVyVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByaXZhdGUgd3JhcHBlZEluamVjdG9yO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgZ2V0IF92aWV3KCk6IGFueTtcbn1cbiJdfQ==