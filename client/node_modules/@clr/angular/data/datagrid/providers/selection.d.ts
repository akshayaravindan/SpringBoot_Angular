import { Observable } from 'rxjs';
import { FiltersProvider } from './filters';
import { Items } from './items';
import { SelectionType } from '../enums/selection-type';
import * as ɵngcc0 from '@angular/core';
export declare class Selection<T = any> {
    private _items;
    private _filters;
    id: string;
    preserveSelection: boolean;
    private prevSelectionRefs;
    private prevSingleSelectionRef;
    private lockedRefs;
    constructor(_items: Items<T>, _filters: FiltersProvider<T>);
    clearSelection(): void;
    private _selectionType;
    get selectionType(): SelectionType;
    set selectionType(value: SelectionType);
    /** @deprecated since 2.0, remove in 3.0 */
    rowSelectionMode: boolean;
    private get _selectable();
    /**
     * Ignore items changes in the same change detection cycle.
     */
    private debounce;
    /**
     * Subscriptions to the other providers changes.
     */
    private subscriptions;
    /**
     * Cleans up our subscriptions to other providers
     */
    destroy(): void;
    /**
     * The current selection in single selection type
     */
    private _currentSingle;
    get currentSingle(): T;
    set currentSingle(value: T);
    /**
     * The current selection
     */
    private _current;
    get current(): T[];
    set current(value: T[]);
    updateCurrent(value: T[], emit: boolean): void;
    /**
     * The Observable that lets other classes subscribe to selection changes
     */
    private _change;
    private emitChange;
    get change(): Observable<T[] | T>;
    /**
     * Checks if an item is currently selected
     */
    isSelected(item: T): boolean;
    /**
     * Selects an item
     */
    private selectItem;
    /**
     * Deselects an item
     */
    private deselectItem;
    /**
     * Selects or deselects an item
     */
    setSelected(item: T, selected: boolean): void;
    /**
     * Checks if all currently displayed items are selected
     */
    isAllSelected(): boolean;
    /**
     * Make sure that it could be locked
     *
     * @remark
     * Check also is items.all an array, if not there is no nothing to lock or compare to
     *
     */
    private canItBeLocked;
    /**
     * Lock and unlock item
     */
    lockItem(item: T, lock: boolean): void;
    /**
     * Check is item locked or not by searcing into lockedRefs for entry
     */
    isLocked(item: T): boolean;
    /**
     * Selects or deselects all currently displayed items
     */
    toggleAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Selection<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Selection<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLmQudHMiLCJzb3VyY2VzIjpbInNlbGVjdGlvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaWx0ZXJzUHJvdmlkZXIgfSBmcm9tICcuL2ZpbHRlcnMnO1xuaW1wb3J0IHsgSXRlbXMgfSBmcm9tICcuL2l0ZW1zJztcbmltcG9ydCB7IFNlbGVjdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtcy9zZWxlY3Rpb24tdHlwZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZWxlY3Rpb248VCA9IGFueT4ge1xuICAgIHByaXZhdGUgX2l0ZW1zO1xuICAgIHByaXZhdGUgX2ZpbHRlcnM7XG4gICAgaWQ6IHN0cmluZztcbiAgICBwcmVzZXJ2ZVNlbGVjdGlvbjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHByZXZTZWxlY3Rpb25SZWZzO1xuICAgIHByaXZhdGUgcHJldlNpbmdsZVNlbGVjdGlvblJlZjtcbiAgICBwcml2YXRlIGxvY2tlZFJlZnM7XG4gICAgY29uc3RydWN0b3IoX2l0ZW1zOiBJdGVtczxUPiwgX2ZpbHRlcnM6IEZpbHRlcnNQcm92aWRlcjxUPik7XG4gICAgY2xlYXJTZWxlY3Rpb24oKTogdm9pZDtcbiAgICBwcml2YXRlIF9zZWxlY3Rpb25UeXBlO1xuICAgIGdldCBzZWxlY3Rpb25UeXBlKCk6IFNlbGVjdGlvblR5cGU7XG4gICAgc2V0IHNlbGVjdGlvblR5cGUodmFsdWU6IFNlbGVjdGlvblR5cGUpO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjAsIHJlbW92ZSBpbiAzLjAgKi9cbiAgICByb3dTZWxlY3Rpb25Nb2RlOiBib29sZWFuO1xuICAgIHByaXZhdGUgZ2V0IF9zZWxlY3RhYmxlKCk7XG4gICAgLyoqXG4gICAgICogSWdub3JlIGl0ZW1zIGNoYW5nZXMgaW4gdGhlIHNhbWUgY2hhbmdlIGRldGVjdGlvbiBjeWNsZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGRlYm91bmNlO1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmlwdGlvbnMgdG8gdGhlIG90aGVyIHByb3ZpZGVycyBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgb3VyIHN1YnNjcmlwdGlvbnMgdG8gb3RoZXIgcHJvdmlkZXJzXG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHNlbGVjdGlvbiBpbiBzaW5nbGUgc2VsZWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBwcml2YXRlIF9jdXJyZW50U2luZ2xlO1xuICAgIGdldCBjdXJyZW50U2luZ2xlKCk6IFQ7XG4gICAgc2V0IGN1cnJlbnRTaW5nbGUodmFsdWU6IFQpO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHNlbGVjdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgX2N1cnJlbnQ7XG4gICAgZ2V0IGN1cnJlbnQoKTogVFtdO1xuICAgIHNldCBjdXJyZW50KHZhbHVlOiBUW10pO1xuICAgIHVwZGF0ZUN1cnJlbnQodmFsdWU6IFRbXSwgZW1pdDogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVGhlIE9ic2VydmFibGUgdGhhdCBsZXRzIG90aGVyIGNsYXNzZXMgc3Vic2NyaWJlIHRvIHNlbGVjdGlvbiBjaGFuZ2VzXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY2hhbmdlO1xuICAgIHByaXZhdGUgZW1pdENoYW5nZTtcbiAgICBnZXQgY2hhbmdlKCk6IE9ic2VydmFibGU8VFtdIHwgVD47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGFuIGl0ZW0gaXMgY3VycmVudGx5IHNlbGVjdGVkXG4gICAgICovXG4gICAgaXNTZWxlY3RlZChpdGVtOiBUKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGFuIGl0ZW1cbiAgICAgKi9cbiAgICBwcml2YXRlIHNlbGVjdEl0ZW07XG4gICAgLyoqXG4gICAgICogRGVzZWxlY3RzIGFuIGl0ZW1cbiAgICAgKi9cbiAgICBwcml2YXRlIGRlc2VsZWN0SXRlbTtcbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIG9yIGRlc2VsZWN0cyBhbiBpdGVtXG4gICAgICovXG4gICAgc2V0U2VsZWN0ZWQoaXRlbTogVCwgc2VsZWN0ZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhbGwgY3VycmVudGx5IGRpc3BsYXllZCBpdGVtcyBhcmUgc2VsZWN0ZWRcbiAgICAgKi9cbiAgICBpc0FsbFNlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogTWFrZSBzdXJlIHRoYXQgaXQgY291bGQgYmUgbG9ja2VkXG4gICAgICpcbiAgICAgKiBAcmVtYXJrXG4gICAgICogQ2hlY2sgYWxzbyBpcyBpdGVtcy5hbGwgYW4gYXJyYXksIGlmIG5vdCB0aGVyZSBpcyBubyBub3RoaW5nIHRvIGxvY2sgb3IgY29tcGFyZSB0b1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYW5JdEJlTG9ja2VkO1xuICAgIC8qKlxuICAgICAqIExvY2sgYW5kIHVubG9jayBpdGVtXG4gICAgICovXG4gICAgbG9ja0l0ZW0oaXRlbTogVCwgbG9jazogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaXMgaXRlbSBsb2NrZWQgb3Igbm90IGJ5IHNlYXJjaW5nIGludG8gbG9ja2VkUmVmcyBmb3IgZW50cnlcbiAgICAgKi9cbiAgICBpc0xvY2tlZChpdGVtOiBUKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIG9yIGRlc2VsZWN0cyBhbGwgY3VycmVudGx5IGRpc3BsYXllZCBpdGVtc1xuICAgICAqL1xuICAgIHRvZ2dsZUFsbCgpOiB2b2lkO1xufVxuIl19