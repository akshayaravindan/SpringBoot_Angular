import { ElementRef, AfterViewInit } from '@angular/core';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrSpinner implements AfterViewInit {
    private el;
    private ariaLiveService;
    constructor(el: ElementRef, ariaLiveService: ClrAriaLiveService);
    ngAfterViewInit(): void;
    /**
     * Default class for all spinners. This class is always true
     */
    get spinnerClass(): boolean;
    private _inline;
    get inlineClass(): boolean;
    set clrInline(value: boolean | string);
    private _inverse;
    get inverseClass(): boolean;
    set clrInverse(value: boolean | string);
    /**
     * By default all spinners are Large. (spinner-lg)
     * To change the size you need to use set clrSmall or clrMedium to TRUE/
     */
    /**
     * Small
     */
    private _small;
    get smallClass(): boolean;
    set clrSmall(value: boolean | string);
    /**
     * When clrSmall & clrMedium are set both to true.
     * The CSS with high priority will be small - so medium size will be ignored.
     *
     * For this reason if clrSmall is set we won't add clrMedium class.
     *
     * NOTE: This is dictated by the CSS rules.
     * DON'T USE clrSmall & clrMedium to toggle classes. This could change without notice.
     *
     * Also there is no logical need to have both of them set to TRUE or FALSE.
     */
    private _medium;
    get mediumClass(): boolean;
    set clrMedium(value: boolean | string);
    /**
     * By default aria-live will be set to `polite` .
     * To change is it you need to set clrAssertive or clrOff to TRUE
     *
     * There is priority:
     *   Default: polite
     *   Asertive
     *   Off
     *
     * In case when for some reason you have clrAssertive=TRUE and clrOff=TRUE,
     * we gonna set `assertive` as value of aria-live.
     *
     */
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    get ariaLive(): ClrAriaLivePoliteness;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrSpinner, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrSpinner, "clr-spinner", never, { "clrInline": "clrInline"; "clrInverse": "clrInverse"; "clrSmall": "clrSmall"; "clrMedium": "clrMedium"; "assertive": "clrAssertive"; "off": "clrOff"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5kLnRzIiwic291cmNlcyI6WyJzcGlubmVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xyQXJpYUxpdmVTZXJ2aWNlLCBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3MgfSBmcm9tICcuLi8uLi91dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsclNwaW5uZXIgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgYXJpYUxpdmVTZXJ2aWNlO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBhcmlhTGl2ZVNlcnZpY2U6IENsckFyaWFMaXZlU2VydmljZSk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBjbGFzcyBmb3IgYWxsIHNwaW5uZXJzLiBUaGlzIGNsYXNzIGlzIGFsd2F5cyB0cnVlXG4gICAgICovXG4gICAgZ2V0IHNwaW5uZXJDbGFzcygpOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2lubGluZTtcbiAgICBnZXQgaW5saW5lQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xySW5saW5lKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICBwcml2YXRlIF9pbnZlcnNlO1xuICAgIGdldCBpbnZlcnNlQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xySW52ZXJzZSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCBhbGwgc3Bpbm5lcnMgYXJlIExhcmdlLiAoc3Bpbm5lci1sZylcbiAgICAgKiBUbyBjaGFuZ2UgdGhlIHNpemUgeW91IG5lZWQgdG8gdXNlIHNldCBjbHJTbWFsbCBvciBjbHJNZWRpdW0gdG8gVFJVRS9cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTbWFsbFxuICAgICAqL1xuICAgIHByaXZhdGUgX3NtYWxsO1xuICAgIGdldCBzbWFsbENsYXNzKCk6IGJvb2xlYW47XG4gICAgc2V0IGNsclNtYWxsKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICAvKipcbiAgICAgKiBXaGVuIGNsclNtYWxsICYgY2xyTWVkaXVtIGFyZSBzZXQgYm90aCB0byB0cnVlLlxuICAgICAqIFRoZSBDU1Mgd2l0aCBoaWdoIHByaW9yaXR5IHdpbGwgYmUgc21hbGwgLSBzbyBtZWRpdW0gc2l6ZSB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiBGb3IgdGhpcyByZWFzb24gaWYgY2xyU21hbGwgaXMgc2V0IHdlIHdvbid0IGFkZCBjbHJNZWRpdW0gY2xhc3MuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGlzIGRpY3RhdGVkIGJ5IHRoZSBDU1MgcnVsZXMuXG4gICAgICogRE9OJ1QgVVNFIGNsclNtYWxsICYgY2xyTWVkaXVtIHRvIHRvZ2dsZSBjbGFzc2VzLiBUaGlzIGNvdWxkIGNoYW5nZSB3aXRob3V0IG5vdGljZS5cbiAgICAgKlxuICAgICAqIEFsc28gdGhlcmUgaXMgbm8gbG9naWNhbCBuZWVkIHRvIGhhdmUgYm90aCBvZiB0aGVtIHNldCB0byBUUlVFIG9yIEZBTFNFLlxuICAgICAqL1xuICAgIHByaXZhdGUgX21lZGl1bTtcbiAgICBnZXQgbWVkaXVtQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xyTWVkaXVtKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0IGFyaWEtbGl2ZSB3aWxsIGJlIHNldCB0byBgcG9saXRlYCAuXG4gICAgICogVG8gY2hhbmdlIGlzIGl0IHlvdSBuZWVkIHRvIHNldCBjbHJBc3NlcnRpdmUgb3IgY2xyT2ZmIHRvIFRSVUVcbiAgICAgKlxuICAgICAqIFRoZXJlIGlzIHByaW9yaXR5OlxuICAgICAqICAgRGVmYXVsdDogcG9saXRlXG4gICAgICogICBBc2VydGl2ZVxuICAgICAqICAgT2ZmXG4gICAgICpcbiAgICAgKiBJbiBjYXNlIHdoZW4gZm9yIHNvbWUgcmVhc29uIHlvdSBoYXZlIGNsckFzc2VydGl2ZT1UUlVFIGFuZCBjbHJPZmY9VFJVRSxcbiAgICAgKiB3ZSBnb25uYSBzZXQgYGFzc2VydGl2ZWAgYXMgdmFsdWUgb2YgYXJpYS1saXZlLlxuICAgICAqXG4gICAgICovXG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIGFzc2VydGl2ZTogYm9vbGVhbjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgb2ZmOiBib29sZWFuO1xuICAgIGdldCBhcmlhTGl2ZSgpOiBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3M7XG59XG4iXX0=