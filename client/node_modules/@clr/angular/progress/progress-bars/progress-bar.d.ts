import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrProgressBar {
    private ariaLiveService;
    constructor(ariaLiveService: ClrAriaLiveService);
    /**
     * Handle component ID
     */
    private _ID;
    externalId: string;
    set id(value: string);
    get id(): string;
    max: number;
    displayval: string;
    private _value;
    get value(): number;
    set value(value: number);
    get progressClass(): boolean;
    private _labeled;
    get labeledClass(): boolean;
    set clrLabeled(value: boolean | string);
    private _fade;
    get fadeClass(): boolean;
    set clrFade(value: boolean | string);
    private _loop;
    get loopClass(): boolean;
    set clrLoop(value: boolean | string);
    private _success;
    get successClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrSuccess(value: boolean | string);
    private _danger;
    get dangerClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrDanger(value: boolean | string);
    private _flash;
    get flashClass(): boolean;
    set clrFlash(value: boolean | string);
    private _flashDanger;
    get flashDangerClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrFlashDanger(value: boolean | string);
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    /**
     * Make sure that we always will have something that is readable
     * for the screen reader
     */
    get displayValue(): string;
    /**
     * Display aria-live only when there is value and it's not 0 or equal to the max value
     */
    displayAriaLive(): boolean;
    get ariaLive(): ClrAriaLivePoliteness;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrProgressBar, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrProgressBar, "clr-progress-bar", never, { "max": "clrMax"; "id": "id"; "value": "clrValue"; "clrLabeled": "clrLabeled"; "clrFade": "clrFade"; "clrLoop": "clrLoop"; "clrSuccess": "clrSuccess"; "clrDanger": "clrDanger"; "clrFlash": "clrFlash"; "clrFlashDanger": "clrFlashDanger"; "displayval": "clrDisplayval"; "assertive": "clrAssertive"; "off": "clrOff"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtYmFyLmQudHMiLCJzb3VyY2VzIjpbInByb2dyZXNzLWJhci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbHJBcmlhTGl2ZVNlcnZpY2UsIENsckFyaWFMaXZlUG9saXRlbmVzcyB9IGZyb20gJy4uLy4uL3V0aWxzL2ExMXkvYXJpYS1saXZlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyUHJvZ3Jlc3NCYXIge1xuICAgIHByaXZhdGUgYXJpYUxpdmVTZXJ2aWNlO1xuICAgIGNvbnN0cnVjdG9yKGFyaWFMaXZlU2VydmljZTogQ2xyQXJpYUxpdmVTZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgY29tcG9uZW50IElEXG4gICAgICovXG4gICAgcHJpdmF0ZSBfSUQ7XG4gICAgZXh0ZXJuYWxJZDogc3RyaW5nO1xuICAgIHNldCBpZCh2YWx1ZTogc3RyaW5nKTtcbiAgICBnZXQgaWQoKTogc3RyaW5nO1xuICAgIG1heDogbnVtYmVyO1xuICAgIGRpc3BsYXl2YWw6IHN0cmluZztcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyO1xuICAgIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgcHJvZ3Jlc3NDbGFzcygpOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2xhYmVsZWQ7XG4gICAgZ2V0IGxhYmVsZWRDbGFzcygpOiBib29sZWFuO1xuICAgIHNldCBjbHJMYWJlbGVkKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICBwcml2YXRlIF9mYWRlO1xuICAgIGdldCBmYWRlQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xyRmFkZSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfbG9vcDtcbiAgICBnZXQgbG9vcENsYXNzKCk6IGJvb2xlYW47XG4gICAgc2V0IGNsckxvb3AodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIHByaXZhdGUgX3N1Y2Nlc3M7XG4gICAgZ2V0IHN1Y2Nlc3NDbGFzcygpOiBib29sZWFuO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBzZXQgY2xyU3VjY2Vzcyh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfZGFuZ2VyO1xuICAgIGdldCBkYW5nZXJDbGFzcygpOiBib29sZWFuO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBzZXQgY2xyRGFuZ2VyKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICBwcml2YXRlIF9mbGFzaDtcbiAgICBnZXQgZmxhc2hDbGFzcygpOiBib29sZWFuO1xuICAgIHNldCBjbHJGbGFzaCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfZmxhc2hEYW5nZXI7XG4gICAgZ2V0IGZsYXNoRGFuZ2VyQ2xhc3MoKTogYm9vbGVhbjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMi4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgc2V0IGNsckZsYXNoRGFuZ2VyKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgYXNzZXJ0aXZlOiBib29sZWFuO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBvZmY6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIHdpbGwgaGF2ZSBzb21ldGhpbmcgdGhhdCBpcyByZWFkYWJsZVxuICAgICAqIGZvciB0aGUgc2NyZWVuIHJlYWRlclxuICAgICAqL1xuICAgIGdldCBkaXNwbGF5VmFsdWUoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgYXJpYS1saXZlIG9ubHkgd2hlbiB0aGVyZSBpcyB2YWx1ZSBhbmQgaXQncyBub3QgMCBvciBlcXVhbCB0byB0aGUgbWF4IHZhbHVlXG4gICAgICovXG4gICAgZGlzcGxheUFyaWFMaXZlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGFyaWFMaXZlKCk6IENsckFyaWFMaXZlUG9saXRlbmVzcztcbn1cbiJdfQ==