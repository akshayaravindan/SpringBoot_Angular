import { AfterContentInit, ElementRef, OnDestroy } from '@angular/core';
import { IfActiveService } from '../../utils/conditional/if-active.service';
import { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TabsLayout } from './enums/tabs-layout.enum';
import { TabsService } from './providers/tabs.service';
import { ClrTabLink } from './tab-link.directive';
import * as ɵngcc0 from '@angular/core';
export declare class ClrTabs implements AfterContentInit, OnDestroy {
    ifActiveService: IfActiveService;
    toggleService: ClrPopoverToggleService;
    tabsService: TabsService;
    tabsId: number;
    commonStrings: ClrCommonStringsService;
    private subscriptions;
    private get overflowPosition();
    private set tabContentViewContainer(value);
    set layout(layout: TabsLayout);
    get layout(): TabsLayout;
    private tabs;
    private _tabLinkDirectives;
    get tabLinkDirectives(): ClrTabLink[];
    tabLinkElements: HTMLElement[];
    keyFocus: ClrKeyFocus;
    constructor(ifActiveService: IfActiveService, toggleService: ClrPopoverToggleService, tabsService: TabsService, tabsId: number, commonStrings: ClrCommonStringsService);
    get activeTabInOverflow(): boolean;
    get activeTabPosition(): number;
    get tabIds(): string;
    get isCurrentInOverflow(): boolean;
    get isVertical(): boolean;
    toggleOverflowOnPosition(position: number): void;
    private _tabOverflowEl;
    set tabOverflowEl(value: ElementRef);
    resetKeyFocusCurrentToActive(event: FocusEvent): void;
    toggleOverflowOnClick(): void;
    _mousedown: boolean;
    openOverflowOnFocus(): void;
    closeOnFocusOut(event: FocusEvent): void;
    closeOnEscapeKey(): void;
    closeOnOutsideClick(event: Event, tabOverflowTrigger: HTMLElement): void;
    private listenForTabLinkChanges;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrTabs, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrTabs, "clr-tabs", never, { "layout": "clrLayout"; }, {}, ["tabs"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5kLnRzIiwic291cmNlcyI6WyJ0YWJzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWZBY3RpdmVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uZGl0aW9uYWwvaWYtYWN0aXZlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyS2V5Rm9jdXMgfSBmcm9tICcuLi8uLi91dGlscy9mb2N1cy9rZXktZm9jdXMva2V5LWZvY3VzJztcbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5pbXBvcnQgeyBUYWJzTGF5b3V0IH0gZnJvbSAnLi9lbnVtcy90YWJzLWxheW91dC5lbnVtJztcbmltcG9ydCB7IFRhYnNTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvdGFicy5zZXJ2aWNlJztcbmltcG9ydCB7IENsclRhYkxpbmsgfSBmcm9tICcuL3RhYi1saW5rLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJUYWJzIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBpZkFjdGl2ZVNlcnZpY2U6IElmQWN0aXZlU2VydmljZTtcbiAgICB0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZTtcbiAgICB0YWJzU2VydmljZTogVGFic1NlcnZpY2U7XG4gICAgdGFic0lkOiBudW1iZXI7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIHByaXZhdGUgZ2V0IG92ZXJmbG93UG9zaXRpb24oKTtcbiAgICBwcml2YXRlIHNldCB0YWJDb250ZW50Vmlld0NvbnRhaW5lcih2YWx1ZSk7XG4gICAgc2V0IGxheW91dChsYXlvdXQ6IFRhYnNMYXlvdXQpO1xuICAgIGdldCBsYXlvdXQoKTogVGFic0xheW91dDtcbiAgICBwcml2YXRlIHRhYnM7XG4gICAgcHJpdmF0ZSBfdGFiTGlua0RpcmVjdGl2ZXM7XG4gICAgZ2V0IHRhYkxpbmtEaXJlY3RpdmVzKCk6IENsclRhYkxpbmtbXTtcbiAgICB0YWJMaW5rRWxlbWVudHM6IEhUTUxFbGVtZW50W107XG4gICAga2V5Rm9jdXM6IENscktleUZvY3VzO1xuICAgIGNvbnN0cnVjdG9yKGlmQWN0aXZlU2VydmljZTogSWZBY3RpdmVTZXJ2aWNlLCB0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSwgdGFic1NlcnZpY2U6IFRhYnNTZXJ2aWNlLCB0YWJzSWQ6IG51bWJlciwgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UpO1xuICAgIGdldCBhY3RpdmVUYWJJbk92ZXJmbG93KCk6IGJvb2xlYW47XG4gICAgZ2V0IGFjdGl2ZVRhYlBvc2l0aW9uKCk6IG51bWJlcjtcbiAgICBnZXQgdGFiSWRzKCk6IHN0cmluZztcbiAgICBnZXQgaXNDdXJyZW50SW5PdmVyZmxvdygpOiBib29sZWFuO1xuICAgIGdldCBpc1ZlcnRpY2FsKCk6IGJvb2xlYW47XG4gICAgdG9nZ2xlT3ZlcmZsb3dPblBvc2l0aW9uKHBvc2l0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIHByaXZhdGUgX3RhYk92ZXJmbG93RWw7XG4gICAgc2V0IHRhYk92ZXJmbG93RWwodmFsdWU6IEVsZW1lbnRSZWYpO1xuICAgIHJlc2V0S2V5Rm9jdXNDdXJyZW50VG9BY3RpdmUoZXZlbnQ6IEZvY3VzRXZlbnQpOiB2b2lkO1xuICAgIHRvZ2dsZU92ZXJmbG93T25DbGljaygpOiB2b2lkO1xuICAgIF9tb3VzZWRvd246IGJvb2xlYW47XG4gICAgb3Blbk92ZXJmbG93T25Gb2N1cygpOiB2b2lkO1xuICAgIGNsb3NlT25Gb2N1c091dChldmVudDogRm9jdXNFdmVudCk6IHZvaWQ7XG4gICAgY2xvc2VPbkVzY2FwZUtleSgpOiB2b2lkO1xuICAgIGNsb3NlT25PdXRzaWRlQ2xpY2soZXZlbnQ6IEV2ZW50LCB0YWJPdmVyZmxvd1RyaWdnZXI6IEhUTUxFbGVtZW50KTogdm9pZDtcbiAgICBwcml2YXRlIGxpc3RlbkZvclRhYkxpbmtDaGFuZ2VzO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=