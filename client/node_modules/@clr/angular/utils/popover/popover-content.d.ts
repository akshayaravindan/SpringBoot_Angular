import { OnDestroy, Renderer2, TemplateRef, ViewContainerRef, AfterContentChecked } from '@angular/core';
import { ClrPopoverToggleService } from './providers/popover-toggle.service';
import { ClrPopoverEventsService } from './providers/popover-events.service';
import { ClrPopoverPositionService } from './providers/popover-position.service';
import { ClrPopoverPosition } from './interfaces/popover-position.interface';
/** @dynamic */
import * as ɵngcc0 from '@angular/core';
export declare class ClrPopoverContent implements AfterContentChecked, OnDestroy {
    private document;
    private container;
    private template;
    private renderer;
    private smartPositionService;
    private smartEventsService;
    private smartOpenService;
    private view;
    private subscriptions;
    set open(value: boolean);
    set contentAt(position: ClrPopoverPosition);
    set outsideClickClose(clickToClose: any);
    set scrollToClose(scrollToClose: any);
    constructor(document: HTMLDocument, container: ViewContainerRef, template: TemplateRef<any>, renderer: Renderer2, smartPositionService: ClrPopoverPositionService, smartEventsService: ClrPopoverEventsService, smartOpenService: ClrPopoverToggleService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private removeContent;
    /**
     * TODO(matt): investigate why DebugElement retains a reference to the nodes and causes a memory leak.
     * A note about the use of appendChild/removeChild
     * The DebugElement is keeping a reference to the detached node and its unclear why.
     * This does warrant further investigation. But, since it doesn't happen in production mode
     * it is a low priority issue for now.
     */
    private addContent;
    private shouldRealign;
    private checkCollector;
    ngAfterContentChecked(): void;
    private alignContent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrPopoverContent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrPopoverContent, "[clrPopoverContent]", never, { "open": "clrPopoverContent"; "contentAt": "clrPopoverContentAt"; "outsideClickClose": "clrPopoverContentOutsideClickToClose"; "scrollToClose": "clrPopoverContentScrollToClose"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250ZW50LmQudHMiLCJzb3VyY2VzIjpbInBvcG92ZXItY29udGVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBSZW5kZXJlcjIsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBBZnRlckNvbnRlbnRDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlckV2ZW50c1NlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9wb3BvdmVyLWV2ZW50cy5zZXJ2aWNlJztcbmltcG9ydCB7IENsclBvcG92ZXJQb3NpdGlvblNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9wb3BvdmVyLXBvc2l0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclBvc2l0aW9uIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvcG92ZXItcG9zaXRpb24uaW50ZXJmYWNlJztcbi8qKiBAZHluYW1pYyAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyUG9wb3ZlckNvbnRlbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRDaGVja2VkLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgcHJpdmF0ZSBjb250YWluZXI7XG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgc21hcnRQb3NpdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBzbWFydEV2ZW50c1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBzbWFydE9wZW5TZXJ2aWNlO1xuICAgIHByaXZhdGUgdmlldztcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgc2V0IG9wZW4odmFsdWU6IGJvb2xlYW4pO1xuICAgIHNldCBjb250ZW50QXQocG9zaXRpb246IENsclBvcG92ZXJQb3NpdGlvbik7XG4gICAgc2V0IG91dHNpZGVDbGlja0Nsb3NlKGNsaWNrVG9DbG9zZTogYW55KTtcbiAgICBzZXQgc2Nyb2xsVG9DbG9zZShzY3JvbGxUb0Nsb3NlOiBhbnkpO1xuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50OiBIVE1MRG9jdW1lbnQsIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZiwgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4sIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHNtYXJ0UG9zaXRpb25TZXJ2aWNlOiBDbHJQb3BvdmVyUG9zaXRpb25TZXJ2aWNlLCBzbWFydEV2ZW50c1NlcnZpY2U6IENsclBvcG92ZXJFdmVudHNTZXJ2aWNlLCBzbWFydE9wZW5TZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIHJlbW92ZUNvbnRlbnQ7XG4gICAgLyoqXG4gICAgICogVE9ETyhtYXR0KTogaW52ZXN0aWdhdGUgd2h5IERlYnVnRWxlbWVudCByZXRhaW5zIGEgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBhbmQgY2F1c2VzIGEgbWVtb3J5IGxlYWsuXG4gICAgICogQSBub3RlIGFib3V0IHRoZSB1c2Ugb2YgYXBwZW5kQ2hpbGQvcmVtb3ZlQ2hpbGRcbiAgICAgKiBUaGUgRGVidWdFbGVtZW50IGlzIGtlZXBpbmcgYSByZWZlcmVuY2UgdG8gdGhlIGRldGFjaGVkIG5vZGUgYW5kIGl0cyB1bmNsZWFyIHdoeS5cbiAgICAgKiBUaGlzIGRvZXMgd2FycmFudCBmdXJ0aGVyIGludmVzdGlnYXRpb24uIEJ1dCwgc2luY2UgaXQgZG9lc24ndCBoYXBwZW4gaW4gcHJvZHVjdGlvbiBtb2RlXG4gICAgICogaXQgaXMgYSBsb3cgcHJpb3JpdHkgaXNzdWUgZm9yIG5vdy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZENvbnRlbnQ7XG4gICAgcHJpdmF0ZSBzaG91bGRSZWFsaWduO1xuICAgIHByaXZhdGUgY2hlY2tDb2xsZWN0b3I7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhbGlnbkNvbnRlbnQ7XG59XG4iXX0=