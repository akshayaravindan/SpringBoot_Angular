import { AfterViewInit, ElementRef, EventEmitter, Injector, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { FocusService } from '../common/providers/focus.service';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrDateContainer } from './date-container';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateIOService } from './providers/date-io.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { DatepickerFocusService } from './providers/datepicker-focus.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDateInput extends WrappedFormControl<ClrDateContainer> implements OnInit, AfterViewInit, OnDestroy {
    protected el: ElementRef;
    protected renderer: Renderer2;
    protected control: NgControl;
    private container;
    private dateIOService;
    private dateNavigationService;
    private datepickerEnabledService;
    private dateFormControlService;
    private platformId;
    private focusService;
    private datepickerFocusService;
    placeholder: string;
    dateChange: EventEmitter<Date>;
    set date(date: Date);
    set min(dateString: string);
    set max(dateString: string);
    protected index: number;
    private initialClrDateInputValue;
    private previousDateChange;
    constructor(viewContainerRef: ViewContainerRef, injector: Injector, el: ElementRef, renderer: Renderer2, control: NgControl, container: ClrDateContainer, dateIOService: DateIOService, dateNavigationService: DateNavigationService, datepickerEnabledService: DatepickerEnabledService, dateFormControlService: DateFormControlService, platformId: Object, focusService: FocusService, datepickerFocusService: DatepickerFocusService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setFocusStates(): void;
    triggerValidation(): void;
    get placeholderText(): string;
    get inputType(): string;
    onValueChange(target: HTMLInputElement): void;
    set disabled(value: boolean | string);
    get disabled(): boolean | string;
    private usingClarityDatepicker;
    private usingNativeDatepicker;
    private setFocus;
    private populateServicesFromContainerComponent;
    private processInitialInputs;
    private updateDate;
    private updateInput;
    private getValidDateValueFromDate;
    private emitDateOutput;
    private datepickerHasFormControl;
    private listenForControlValueChanges;
    private listenForUserSelectedDayChanges;
    private listenForTouchChanges;
    private listenForDirtyChanges;
    private listenForInputRefocus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDateInput, [null, null, null, null, { optional: true; self: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, null, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrDateInput, "[clrDate]", never, { "date": "clrDate"; "min": "min"; "max": "max"; "disabled": "disabled"; "placeholder": "placeholder"; }, { "dateChange": "clrDateChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1pbnB1dC5kLnRzIiwic291cmNlcyI6WyJkYXRlLWlucHV0LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvY3VzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvZm9jdXMuc2VydmljZSc7XG5pbXBvcnQgeyBXcmFwcGVkRm9ybUNvbnRyb2wgfSBmcm9tICcuLi9jb21tb24vd3JhcHBlZC1jb250cm9sJztcbmltcG9ydCB7IENsckRhdGVDb250YWluZXIgfSBmcm9tICcuL2RhdGUtY29udGFpbmVyJztcbmltcG9ydCB7IERhdGVGb3JtQ29udHJvbFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kYXRlLWZvcm0tY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVJT1NlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kYXRlLWlvLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZU5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0ZS1uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZXBpY2tlckVuYWJsZWRTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0ZXBpY2tlci1lbmFibGVkLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZXBpY2tlckZvY3VzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGVwaWNrZXItZm9jdXMuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJEYXRlSW5wdXQgZXh0ZW5kcyBXcmFwcGVkRm9ybUNvbnRyb2w8Q2xyRGF0ZUNvbnRhaW5lcj4gaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGVsOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByb3RlY3RlZCBjb250cm9sOiBOZ0NvbnRyb2w7XG4gICAgcHJpdmF0ZSBjb250YWluZXI7XG4gICAgcHJpdmF0ZSBkYXRlSU9TZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0ZU5hdmlnYXRpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0ZXBpY2tlckVuYWJsZWRTZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0ZUZvcm1Db250cm9sU2VydmljZTtcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgcHJpdmF0ZSBmb2N1c1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBkYXRlcGlja2VyRm9jdXNTZXJ2aWNlO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgZGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIHNldCBkYXRlKGRhdGU6IERhdGUpO1xuICAgIHNldCBtaW4oZGF0ZVN0cmluZzogc3RyaW5nKTtcbiAgICBzZXQgbWF4KGRhdGVTdHJpbmc6IHN0cmluZyk7XG4gICAgcHJvdGVjdGVkIGluZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBpbml0aWFsQ2xyRGF0ZUlucHV0VmFsdWU7XG4gICAgcHJpdmF0ZSBwcmV2aW91c0RhdGVDaGFuZ2U7XG4gICAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgaW5qZWN0b3I6IEluamVjdG9yLCBlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgY29udHJvbDogTmdDb250cm9sLCBjb250YWluZXI6IENsckRhdGVDb250YWluZXIsIGRhdGVJT1NlcnZpY2U6IERhdGVJT1NlcnZpY2UsIGRhdGVOYXZpZ2F0aW9uU2VydmljZTogRGF0ZU5hdmlnYXRpb25TZXJ2aWNlLCBkYXRlcGlja2VyRW5hYmxlZFNlcnZpY2U6IERhdGVwaWNrZXJFbmFibGVkU2VydmljZSwgZGF0ZUZvcm1Db250cm9sU2VydmljZTogRGF0ZUZvcm1Db250cm9sU2VydmljZSwgcGxhdGZvcm1JZDogT2JqZWN0LCBmb2N1c1NlcnZpY2U6IEZvY3VzU2VydmljZSwgZGF0ZXBpY2tlckZvY3VzU2VydmljZTogRGF0ZXBpY2tlckZvY3VzU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBzZXRGb2N1c1N0YXRlcygpOiB2b2lkO1xuICAgIHRyaWdnZXJWYWxpZGF0aW9uKCk6IHZvaWQ7XG4gICAgZ2V0IHBsYWNlaG9sZGVyVGV4dCgpOiBzdHJpbmc7XG4gICAgZ2V0IGlucHV0VHlwZSgpOiBzdHJpbmc7XG4gICAgb25WYWx1ZUNoYW5nZSh0YXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQpOiB2b2lkO1xuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4gfCBzdHJpbmc7XG4gICAgcHJpdmF0ZSB1c2luZ0NsYXJpdHlEYXRlcGlja2VyO1xuICAgIHByaXZhdGUgdXNpbmdOYXRpdmVEYXRlcGlja2VyO1xuICAgIHByaXZhdGUgc2V0Rm9jdXM7XG4gICAgcHJpdmF0ZSBwb3B1bGF0ZVNlcnZpY2VzRnJvbUNvbnRhaW5lckNvbXBvbmVudDtcbiAgICBwcml2YXRlIHByb2Nlc3NJbml0aWFsSW5wdXRzO1xuICAgIHByaXZhdGUgdXBkYXRlRGF0ZTtcbiAgICBwcml2YXRlIHVwZGF0ZUlucHV0O1xuICAgIHByaXZhdGUgZ2V0VmFsaWREYXRlVmFsdWVGcm9tRGF0ZTtcbiAgICBwcml2YXRlIGVtaXREYXRlT3V0cHV0O1xuICAgIHByaXZhdGUgZGF0ZXBpY2tlckhhc0Zvcm1Db250cm9sO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yQ29udHJvbFZhbHVlQ2hhbmdlcztcbiAgICBwcml2YXRlIGxpc3RlbkZvclVzZXJTZWxlY3RlZERheUNoYW5nZXM7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JUb3VjaENoYW5nZXM7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JEaXJ0eUNoYW5nZXM7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JJbnB1dFJlZm9jdXM7XG59XG4iXX0=