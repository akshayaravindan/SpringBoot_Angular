/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { InjectionToken, Injector, OnInit, Type, ViewContainerRef, Renderer2, ElementRef, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';
import { ControlIdService } from './providers/control-id.service';
import { NgControlService } from './providers/ng-control.service';
import { NgControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class WrappedFormControl<W extends DynamicWrapper> implements OnInit, OnDestroy {
    protected vcr: ViewContainerRef;
    protected wrapperType: Type<W>;
    private ngControl;
    protected ngControlService: NgControlService;
    private ifErrorService;
    private controlClassService;
    private markControlService;
    protected renderer: Renderer2;
    protected el: ElementRef<any>;
    protected subscriptions: Subscription[];
    protected index: number;
    protected controlIdService: ControlIdService;
    _id: string;
    constructor(vcr: ViewContainerRef, wrapperType: Type<W>, injector: Injector, ngControl: NgControl, renderer: Renderer2, el: ElementRef);
    get id(): string;
    set id(value: string);
    triggerValidation(): void;
    private _containerInjector;
    protected getProviderFromContainer<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T): T;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private listenForErrorStateChanges;
    private setAriaDescribedBy;
    private getAriaDescribedById;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<WrappedFormControl<any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<WrappedFormControl<any>, never, never, { "id": "id"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlZC1jb250cm9sLmQudHMiLCJzb3VyY2VzIjpbIndyYXBwZWQtY29udHJvbC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IEluamVjdGlvblRva2VuLCBJbmplY3RvciwgT25Jbml0LCBUeXBlLCBWaWV3Q29udGFpbmVyUmVmLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEeW5hbWljV3JhcHBlciB9IGZyb20gJy4uLy4uL3V0aWxzL2hvc3Qtd3JhcHBpbmcvZHluYW1pYy13cmFwcGVyJztcbmltcG9ydCB7IENvbnRyb2xJZFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9jb250cm9sLWlkLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmdDb250cm9sU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL25nLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBXcmFwcGVkRm9ybUNvbnRyb2w8VyBleHRlbmRzIER5bmFtaWNXcmFwcGVyPiBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgdmNyOiBWaWV3Q29udGFpbmVyUmVmO1xuICAgIHByb3RlY3RlZCB3cmFwcGVyVHlwZTogVHlwZTxXPjtcbiAgICBwcml2YXRlIG5nQ29udHJvbDtcbiAgICBwcm90ZWN0ZWQgbmdDb250cm9sU2VydmljZTogTmdDb250cm9sU2VydmljZTtcbiAgICBwcml2YXRlIGlmRXJyb3JTZXJ2aWNlO1xuICAgIHByaXZhdGUgY29udHJvbENsYXNzU2VydmljZTtcbiAgICBwcml2YXRlIG1hcmtDb250cm9sU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcm90ZWN0ZWQgZWw6IEVsZW1lbnRSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW107XG4gICAgcHJvdGVjdGVkIGluZGV4OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGNvbnRyb2xJZFNlcnZpY2U6IENvbnRyb2xJZFNlcnZpY2U7XG4gICAgX2lkOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IodmNyOiBWaWV3Q29udGFpbmVyUmVmLCB3cmFwcGVyVHlwZTogVHlwZTxXPiwgaW5qZWN0b3I6IEluamVjdG9yLCBuZ0NvbnRyb2w6IE5nQ29udHJvbCwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYpO1xuICAgIGdldCBpZCgpOiBzdHJpbmc7XG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpO1xuICAgIHRyaWdnZXJWYWxpZGF0aW9uKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfY29udGFpbmVySW5qZWN0b3I7XG4gICAgcHJvdGVjdGVkIGdldFByb3ZpZGVyRnJvbUNvbnRhaW5lcjxUPih0b2tlbjogVHlwZTxUPiB8IEluamVjdGlvblRva2VuPFQ+LCBub3RGb3VuZFZhbHVlPzogVCk6IFQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yRXJyb3JTdGF0ZUNoYW5nZXM7XG4gICAgcHJpdmF0ZSBzZXRBcmlhRGVzY3JpYmVkQnk7XG4gICAgcHJpdmF0ZSBnZXRBcmlhRGVzY3JpYmVkQnlJZDtcbn1cbiJdfQ==